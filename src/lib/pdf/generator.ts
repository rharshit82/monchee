import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export interface PDFContent {
  title: string;
  sections: Array<{
    heading: string;
    content: string | string[];
    type?: 'text' | 'list' | 'code';
  }>;
  footer?: string;
  logo?: string;
}

export interface ProfilePDFData {
  username: string;
  avatarUrl?: string;
  level: number;
  xp: number;
  streak: number;
  points: number;
  badges: Array<{
    name: string;
    icon?: string;
    description?: string;
  }>;
  completedActivities: {
    quizzes: number;
    labs: number;
    deepDives: number;
    tracks: number;
  };
  completedTracks: Array<{
    name: string;
    badge: string;
  }>;
}

export class PDFGenerator {
  private doc: jsPDF;

  constructor() {
    this.doc = new jsPDF();
  }

  // Generate cheatsheet PDF
  generateCheatsheetPDF(content: PDFContent): void {
    this.doc = new jsPDF();
    
    // Header
    this.addHeader(content.title, 'Cheatsheet');
    
    // Content sections
    let yPosition = 40;
    content.sections.forEach((section, index) => {
      yPosition = this.addSection(section.heading, section.content, yPosition, section.type);
      
      // Add page break if needed
      if (yPosition > 250) {
        this.doc.addPage();
        yPosition = 20;
      }
    });

    // Footer
    this.addFooter(content.footer || 'Generated by Monchee.com');

    // Download
    this.doc.save(`${content.title.replace(/\s+/g, '_')}_Cheatsheet.pdf`);
  }

  // Generate lab report PDF
  generateLabReportPDF(content: PDFContent): void {
    this.doc = new jsPDF();
    
    // Header
    this.addHeader(content.title, 'Lab Report');
    
    // Content sections
    let yPosition = 40;
    content.sections.forEach((section, index) => {
      yPosition = this.addSection(section.heading, section.content, yPosition, section.type);
      
      // Add page break if needed
      if (yPosition > 250) {
        this.doc.addPage();
        yPosition = 20;
      }
    });

    // Footer
    this.addFooter(content.footer || 'Generated by Monchee.com');

    // Download
    this.doc.save(`${content.title.replace(/\s+/g, '_')}_Lab_Report.pdf`);
  }

  // Generate profile PDF
  generateProfilePDF(data: ProfilePDFData): void {
    this.doc = new jsPDF();
    
    // Header
    this.addHeader(`${data.username}'s Learning Profile`, 'Profile Summary');
    
    let yPosition = 40;

    // Stats section
    yPosition = this.addStatsSection(data, yPosition);
    
    // Badges section
    yPosition = this.addBadgesSection(data.badges, yPosition);
    
    // Activities section
    yPosition = this.addActivitiesSection(data.completedActivities, yPosition);
    
    // Tracks section
    if (data.completedTracks.length > 0) {
      yPosition = this.addTracksSection(data.completedTracks, yPosition);
    }

    // Footer
    this.addFooter('Share your Monchee progress on LinkedIn ðŸš€');

    // Download
    this.doc.save(`${data.username}_Monchee_Profile.pdf`);
  }

  private addHeader(title: string, subtitle: string): void {
    // Logo placeholder (you can add actual logo later)
    this.doc.setFillColor(59, 130, 246); // Blue color
    this.doc.rect(20, 10, 15, 15, 'F');
    this.doc.setTextColor(255, 255, 255);
    this.doc.setFontSize(12);
    this.doc.text('M', 27, 20);

    // Title
    this.doc.setTextColor(0, 0, 0);
    this.doc.setFontSize(20);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(title, 40, 20);

    // Subtitle
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'normal');
    this.doc.setTextColor(100, 100, 100);
    this.doc.text(subtitle, 40, 28);

    // Line separator
    this.doc.setDrawColor(200, 200, 200);
    this.doc.line(20, 35, 190, 35);
  }

  private addSection(heading: string, content: string | string[], yPosition: number, type: 'text' | 'list' | 'code' = 'text'): number {
    // Section heading
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(0, 0, 0);
    this.doc.text(heading, 20, yPosition);
    yPosition += 10;

    // Section content
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.setTextColor(50, 50, 50);

    if (type === 'list' && Array.isArray(content)) {
      content.forEach((item, index) => {
        this.doc.text(`â€¢ ${item}`, 25, yPosition);
        yPosition += 6;
      });
    } else if (type === 'code' && typeof content === 'string') {
      // Code block styling
      this.doc.setFillColor(240, 240, 240);
      this.doc.rect(20, yPosition - 5, 170, 20, 'F');
      this.doc.setTextColor(0, 0, 0);
      this.doc.setFont('courier', 'normal');
      this.doc.text(content, 25, yPosition);
      yPosition += 25;
    } else {
      // Regular text
      const text = typeof content === 'string' ? content : content.join(' ');
      const lines = this.doc.splitTextToSize(text, 170);
      this.doc.text(lines, 20, yPosition);
      yPosition += lines.length * 5;
    }

    return yPosition + 10;
  }

  private addStatsSection(data: ProfilePDFData, yPosition: number): number {
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Learning Stats', 20, yPosition);
    yPosition += 15;

    // Stats grid
    const stats = [
      { label: 'Level', value: data.level.toString() },
      { label: 'XP', value: data.xp.toString() },
      { label: 'Streak', value: `${data.streak} days` },
      { label: 'Points', value: data.points.toString() }
    ];

    stats.forEach((stat, index) => {
      const x = 20 + (index % 2) * 85;
      const y = yPosition + Math.floor(index / 2) * 15;
      
      this.doc.setFontSize(10);
      this.doc.setFont('helvetica', 'normal');
      this.doc.setTextColor(100, 100, 100);
      this.doc.text(stat.label, x, y);
      
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'bold');
      this.doc.setTextColor(0, 0, 0);
      this.doc.text(stat.value, x, y + 8);
    });

    return yPosition + 40;
  }

  private addBadgesSection(badges: Array<{name: string, icon?: string, description?: string}>, yPosition: number): number {
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Badges Earned', 20, yPosition);
    yPosition += 15;

    if (badges.length === 0) {
      this.doc.setFontSize(10);
      this.doc.setFont('helvetica', 'normal');
      this.doc.setTextColor(100, 100, 100);
      this.doc.text('No badges earned yet', 20, yPosition);
      return yPosition + 20;
    }

    badges.forEach((badge, index) => {
      const x = 20 + (index % 2) * 85;
      const y = yPosition + Math.floor(index / 2) * 20;
      
      // Badge icon placeholder
      this.doc.setFillColor(255, 193, 7); // Gold color
      this.doc.circle(x + 5, y - 2, 3, 'F');
      
      this.doc.setFontSize(10);
      this.doc.setFont('helvetica', 'bold');
      this.doc.setTextColor(0, 0, 0);
      this.doc.text(badge.name, x + 12, y);
      
      if (badge.description) {
        this.doc.setFontSize(8);
        this.doc.setFont('helvetica', 'normal');
        this.doc.setTextColor(100, 100, 100);
        this.doc.text(badge.description, x + 12, y + 5);
      }
    });

    return yPosition + Math.ceil(badges.length / 2) * 20 + 10;
  }

  private addActivitiesSection(activities: {quizzes: number, labs: number, deepDives: number, tracks: number}, yPosition: number): number {
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Completed Activities', 20, yPosition);
    yPosition += 15;

    const activityStats = [
      { label: 'Quizzes', count: activities.quizzes },
      { label: 'Labs', count: activities.labs },
      { label: 'Deep Dives', count: activities.deepDives },
      { label: 'Tracks', count: activities.tracks }
    ];

    activityStats.forEach((activity, index) => {
      const x = 20 + (index % 2) * 85;
      const y = yPosition + Math.floor(index / 2) * 15;
      
      this.doc.setFontSize(10);
      this.doc.setFont('helvetica', 'normal');
      this.doc.setTextColor(100, 100, 100);
      this.doc.text(activity.label, x, y);
      
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'bold');
      this.doc.setTextColor(0, 0, 0);
      this.doc.text(activity.count.toString(), x, y + 8);
    });

    return yPosition + 40;
  }

  private addTracksSection(tracks: Array<{name: string, badge: string}>, yPosition: number): number {
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Completed Tracks', 20, yPosition);
    yPosition += 15;

    tracks.forEach((track, index) => {
      this.doc.setFontSize(10);
      this.doc.setFont('helvetica', 'normal');
      this.doc.setTextColor(0, 0, 0);
      this.doc.text(`â€¢ ${track.name}`, 25, yPosition);
      
      this.doc.setFontSize(8);
      this.doc.setTextColor(100, 100, 100);
      this.doc.text(track.badge, 25, yPosition + 5);
      
      yPosition += 12;
    });

    return yPosition + 10;
  }

  private addFooter(text: string): void {
    const pageHeight = this.doc.internal.pageSize.height;
    this.doc.setFontSize(8);
    this.doc.setFont('helvetica', 'normal');
    this.doc.setTextColor(100, 100, 100);
    this.doc.text(text, 20, pageHeight - 10);
  }
}

// Utility functions for different content types
export const generateCheatsheetContent = (cheatsheetData: any): PDFContent => {
  return {
    title: cheatsheetData.title,
    sections: [
      {
        heading: 'Why Caching Matters',
        content: cheatsheetData.whyCaching || 'Caching reduces latency, offloads database load, and improves throughput.',
        type: 'text'
      },
      {
        heading: 'Cache Placement Patterns',
        content: cheatsheetData.patterns || [
          'Client-Side Cache (browser cache)',
          'CDN/Edge Cache (Cloudflare, Akamai)',
          'Reverse Proxy Cache (Nginx)',
          'Application Cache (Redis, Memcached)',
          'Database Query Cache (internal DB caches)'
        ],
        type: 'list'
      },
      {
        heading: 'Cache Invalidation Strategies',
        content: cheatsheetData.invalidation || [
          'Write-through',
          'Write-behind',
          'Cache-aside (lazy loading)'
        ],
        type: 'list'
      },
      {
        heading: 'Common Pitfalls',
        content: cheatsheetData.pitfalls || [
          'Stale data',
          'Cache stampede',
          'Thundering herd problem'
        ],
        type: 'list'
      },
      {
        heading: 'Best Practices',
        content: cheatsheetData.bestPractices || [
          'Set TTLs',
          'Use cache warming for popular keys',
          'Monitor hit/miss ratios'
        ],
        type: 'list'
      }
    ],
    footer: 'Generated by Monchee.com'
  };
};

export const generateLabReportContent = (labData: any): PDFContent => {
  return {
    title: labData.title,
    sections: [
      {
        heading: 'Problem Statement',
        content: labData.problemStatement || 'Implement a system to solve the given problem.',
        type: 'text'
      },
      {
        heading: 'Requirements',
        content: labData.requirements || [
          'Functional requirements',
          'Non-functional requirements',
          'Performance requirements'
        ],
        type: 'list'
      },
      {
        heading: 'Hints & Resources',
        content: labData.hints || [
          'Consider scalability',
          'Think about data consistency',
          'Plan for failure scenarios'
        ],
        type: 'list'
      },
      {
        heading: 'Extensions',
        content: labData.extensions || [
          'Add monitoring',
          'Implement caching',
          'Add security features'
        ],
        type: 'list'
      }
    ],
    footer: 'Generated by Monchee.com'
  };
};

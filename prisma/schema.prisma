generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  username  String   @unique
  displayName String?
  avatarUrl String?
  bio       String?

  points    Int      @default(0)
  level     Int      @default(1)
  xp        Int      @default(0)
  streak    Int      @default(0)
  lastActive DateTime?
  joinedAt  DateTime @default(now())

  // Daily goals
  dailyGoal Int      @default(1)
  dailyProgress Int  @default(0)
  lastGoalReset DateTime @default(now())

  badges    Badge[]
  progress  Progress[]
  notes     Note[]
  comments  Comment[]
  streakData Streak?
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  user      UserProfile @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  type      String
  ref       String
  status    String
  score     Int?
  points    Int?
  xp        Int?
  createdAt DateTime @default(now())
}

model Badge {
  id        String   @id @default(cuid())
  userId    String?
  user      UserProfile? @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  name      String
  icon      String?
  description String?
  category  String?
  earnedAt  DateTime @default(now())
  createdAt DateTime @default(now())
}

model Note {
  id        String   @id @default(cuid())
  userId    String
  user      UserProfile @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  type      String
  ref       String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  user      UserProfile @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  type      String
  ref       String
  content   String
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Streak {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      UserProfile @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  current   Int      @default(0)
  longest   Int      @default(0)
  lastActive DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
